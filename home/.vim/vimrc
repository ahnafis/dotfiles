vim9script

import autoload "utils.vim"

g:development = ($VIM_DEV_MODE == "1")

###############################################################################
################################### PLUGINS ###################################
###############################################################################

if g:development
  plug#begin("~/.cache/vim/plugged")
    Plug "morhetz/gruvbox"
    Plug "machakann/vim-highlightedyank"
    Plug "romainl/vim-cool"
    Plug "markonm/traces.vim"
    Plug "ap/vim-css-color", #{ for: [
          \ "css",
          \ "scss",
          \ "typescript",
          \ "typescriptreact",
          \ "vim"
          \ ]}

    Plug "neoclide/coc.nvim", #{ branch: "release" }
    Plug "tpope/vim-fugitive", #{ on: "Git" }
    Plug "airblade/vim-gitgutter"
    Plug "cohama/lexima.vim"
    Plug "tpope/vim-surround"
    Plug "tpope/vim-commentary"
    Plug "tpope/vim-dispatch"
    Plug "junegunn/fzf"
    Plug "junegunn/fzf.vim"
    Plug "mbbill/undotree", #{ on: "UndotreeToggle" }
  plug#end()
endif

# Disable unwanted built-in plugins.
g:loaded_2html_plugin = true
g:loaded_getscriptPlugin = true
g:loaded_gzip = true
g:loaded_logiPat = true
g:loaded_netrw = true
g:loaded_netrwPlugin = true
g:loaded_spellfile_plugin = true
g:loaded_tarPlugin = true
g:loaded_vimball = true
g:loaded_vimballPlugin = true

###############################################################################
################################### SETTINGS ##################################
###############################################################################

filetype on
filetype indent on
filetype plugin on

syntax enable

set number
set relativenumber

set wildmenu
set wildoptions=pum,tagfile

set pumwidth=10
set pumheight=15

# Enable key press timeouts.
set timeout
set ttimeout

# Key press timeouts.
set timeoutlen=1000
set ttimeoutlen=50

set undofile
set noswapfile

set ignorecase
set smartcase

set incsearch
set hlsearch

# Vim command-line history.
set history=500
set viminfo=!,'20,<50,s10,h

# Use system clipboard.
set clipboard^=unnamedplus

# Enable folding.
set foldenable
set foldmethod=manual

# Window splits.
set splitright
set splitbelow

# Automatically read file's content when it's changed outside of Vim.
set autoread

# Don't write (unwanted) changes when switching between buffers.
set noautowrite

# Limit command line outputs.
set shortmess=csxT

# Disable annoying terminal bells.
set belloff=all

# Text decorations:
set textwidth=80
set linebreak
set breakindent

set display+=lastline
&fillchars = "vert:│,fold:˗,eob: "

set hidden
set updatetime=500
set nrformats=alpha,hex,bin
set signcolumn=yes
set spell

augroup fix_format_options
  autocmd!
  autocmd FileType * set formatoptions-=o
augroup END


###############################################################################
############################### GENERAL KEYMAPS ###############################
###############################################################################

# The legend key ;)
g:mapleader = ";"

# Select all.
nnoremap <A-a>  msggVG

# Indent line(s).
nnoremap < <<
nnoremap > >>
vnoremap <  <gv
vnoremap >  >gv

# Yank until end of the line.
nnoremap Y  y$

# Add empty lines vertically.
nnoremap <silent> <C-k>  <ScriptCmd>append(line('.') - 1, '')<CR>
nnoremap <silent> <C-j>  <ScriptCmd>append(line('.'), '')<CR>

# Move lines.
nnoremap <A-k> <Cmd>move . -2<CR>
nnoremap <A-j> <Cmd>move . +1<CR>
vnoremap <A-k> :move '< -2<CR>gv
vnoremap <A-j> :move '> +1<CR>gv

# Buffer navigation:
nnoremap <Tab>    <Cmd>bnext<CR>
nnoremap <S-Tab>  <Cmd>bprevious<CR>

# Tab navigation:
nnoremap <PageUp>    <Cmd>tabnext<CR>
nnoremap <PageDown>  <Cmd>tabprevious<CR>

# Reveal all of the buffers in tabs.
nnoremap <Leader>s   <Cmd>tab ball<CR>

# Delete buffer.
nnoremap <Leader>d   <Cmd>bdelete<CR>

# Go to line's starting after indentation.
nnoremap  0  ^

# Move up and down even through wrapped lines.
nnoremap  k  gk
nnoremap  j  gj
nnoremap gk  k
nnoremap gj  j

# While scrolling with <C-d> and <C-u> keys, keep the view in the middle of the
# window.
nnoremap <C-d>  <C-d>zz
nnoremap <C-u>  <C-u>zz

# Keep the view in the middle of the window while jumping to next/previous
# search.
nnoremap n nzz
nnoremap N Nzz
nnoremap * *zzzv
nnoremap # #zzzv

# Clear search highlight.
nnoremap <C-l> <Cmd>nohlsearch
      \ <bar>diffupdate
      \ <bar>Notify "Cleared!" 
      \ <CR>

# Conveniently macros.
nnoremap Q @q

# Terminal:
# nnoremap <Space>t  <ScriptCmd>utils.OpenTerminal(true)<CR>
# nnoremap <C-@>     <ScriptCmd>utils.OpenTerminal(false)<CR>

###############################################################################
#################### PLUGIN SPECIFIC SETTINGS AND KEYMAPS #####################
###############################################################################

# Background color:
&background = "dark" # $TERM_BACKGROUND   # This is set in ~/.bashrc

# Color scheme:
if g:development
  g:gruvbox_bold = false
  g:gruvbox_italic = true
  g:gruvbox_contrast_dark = "hard"
  g:gruvbox_contrast_light = "hard"
  g:gruvbox_sign_column = "bg0"

  colorscheme gruvbox

  # highlight! link TabLine     StatusLine
  highlight! link TabLineSel  Normal
  # highlight! link TabLineFill GruvboxBg2

else
  colorscheme habamax
  finish
endif

# Color scheme overrides:
highlight! link HighlightedyankRegion Visual

# Lexima:
g:lexima_no_default_rules = v:true
lexima#set_default_rules()
lexima#insmode#map_hook('before', '<CR>', '')

# Git:
g:gitgutter_sign_added = "▌"
g:gitgutter_sign_removed = "▌"
g:gitgutter_sign_modified = "▌"
g:gitgutter_sign_modified_removed = "▌"

nnoremap <Leader>gg <Cmd>tab Git<CR>
nnoremap <Leader>gv <Cmd>vertical Git<CR>

# Commentary:
nmap <A-c> mcgcc`c
vmap <A-c> mcgc`c

# Highlighted yank:
g:highlightedyank_highlight_duration = 100

# Fuzzy finder:
var fzf_options = [ '--prompt= ', '--pointer=', '--layout=reverse' ]

g:fzf_history_dir = $'{$HOME}/.local/share/fzf-history'
g:fzf_layout = { window: { width: 0.9, height: 0.8, yoffset: 0.4 } }
g:fzf_colors = {
  fg:      [ "fg", "Normal" ],
  bg:      [ "bg", "Normal" ],
  hl:      [ "fg", "Comment" ],
  "fg+":   [ "fg", "CursorLine", "CursorColumn", "Normal" ],
  "bg+":   [ "bg", "CursorLine", "CursorColumn" ],
  "hl+":   [ "fg", "Statement" ],
  info:    [ "fg", "PreProc" ],
  border:  [ "fg", "Ignore" ],
  prompt:  [ "fg", "Conditional" ],
  pointer: [ "fg", "Exception" ],
  marker:  [ "fg", "Keyword" ],
  spinner: [ "fg", "Label" ],
  header:  [ "fg", "Comment" ]
}

command! -bang -nargs=? -complete=dir Files
      \ fzf#vim#files(<q-args>,
      \   fzf#vim#with_preview({ options: fzf_options }),
      \   <bang>0
      \ )
command! -nargs=0 Buffers fzf#vim#buffers(
      \ fzf#vim#with_preview({ options: fzf_options })
      \ )

nnoremap <Leader>f   <Cmd>Files<CR>
nnoremap <Leader>g   <Cmd>GitFiles<CR>
nnoremap <Leader>b   <Cmd>Buffers<CR>

# Conqueror of completion:
g:coc_snippet_next = "<C-j>"
g:coc_snippet_prev = "<C-k>"

g:coc_global_extensions =<< trim END
  coc-snippets
  coc-prettier
  coc-cmake
  coc-clangd
  coc-tsserver
  coc-pyright
  coc-tailwindcss
  coc-emmet
  coc-sh
  coc-markdownlint
  coc-json
  coc-yaml
  coc-toml
END

command! -nargs=0 OR
      \ g:CocActionAsync('runCommand', 'editor.action.organizeImport')

command! -nargs=0 F
      \ g:CocActionAsync('runCommand', 'editor.action.formatDocument')

inoremap <expr> <Tab>     utils.OnTab()
inoremap <expr> <S-Tab>   utils.OnShiftTab()
inoremap <expr> <Enter>   utils.OnEnter()
inoremap <expr> <C-@>     coc#refresh()

nmap <silent> g]   <Plug>(coc-definition)
nmap <silent> gtd  <Plug>(coc-type-definition)
nmap <silent> gI   <Plug>(coc-implementation)
nmap <silent> gr   <Plug>(coc-references)
nmap <silent> gn   <Plug>(coc-rename)
nmap <silent> gca  <Plug>(coc-codeaction-cursor)
nmap <silent> gcs  <Plug>(coc-codeaction-source)
nmap <silent> gcf  <Plug>(coc-fix-current)
nmap <silent> gcl  <Plug>(coc-codelens-action)
nmap <silent> gcr  <Plug>(coc-codeaction-refactor)

# xmap <Leader>a   <Plug>(coc-codeaction-selected)
# nmap <Leader>a   <Plug>(coc-codeaction-selected)
# xmap <silent> <Leader>r  <Plug>(coc-codeaction-refactor-selected)
# nmap <silent> <Leader>r  <Plug>(coc-codeaction-refactor-selected)

nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<C-r>=coc#float#scroll(1)\<CR>" : "\<Right>"
inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<C-r>=coc#float#scroll(0)\<CR>" : "\<Left>"
vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"

nnoremap K  <ScriptCmd>utils.ShowDocumentation()<CR>
